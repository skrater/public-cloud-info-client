#!/usr/bin/python3
#
# Copyright (c) 2020 SUSE Linux GmbH.  All rights reserved.
#
# This file is part of susePublicCloudInfoClient
#
# susePublicCloudInfoClient is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# susePublicCloudInfoClientis is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with susePublicCloudInfoClient. If not, see
# <http://www.gnu.org/licenses/>.
#
"""
usage: pint -h | --help
       pint --help-filter
       pint providers
          [ --url=<url> ]
          [ --json | --xml ]
       pint image_states
          [ --url=<url> ]
          [ --json | --xml ]
       pint ({PROVIDERS}) server_types
          [ --url=<url> ]
          [ --json | --xml ]
       pint ({PROVIDERS}) regions
          [ --url=<url> ]
          [ --filter=<filter> ]
          [ --json | --xml ]
       pint ({PROVIDERS}) servers
          [ --url=<url> ]
          [ --filter=<filter> ]
          [ --json | --xml ]
          [ --region=<region> ]
          [ --smt | --regionserver ]
       pint ({PROVIDERS}) images
          [ --url=<url> ]
          [ --active | --inactive | --deleted | --deprecated ]
          [ --filter=<filter> ]
          [ --json | --xml ]
          [ --region=<region> ]
       pint -v | --version

options:
    -h --help
        Show help
    --active
        Only include images which are actively maintained
    --url=<url>
        Change server base URL to query results from [default: {URL}]
    --deleted
        Only include images which have been deleted
    --deprecated
        Only include images which are deprecated
        (scheduled for deletion in 6 months)
    --filter=<filter>
        Comma separated list of available attributes
    --help-filter
        Show detailed help for filter option
    --inactive
        Only include images which are inactive
        (only receiving critical updates, but not yet deprecated)
    --json
        Output data in JSON format
    --region=<region>
        Provide information for regions given in comma separated list,
        if omitted all regions are included
    --regionserver
        Provide only Region Server information
    --smt
        Provide only SMT Server information
    --xml
        Output data in XML format
    -v --version
        Show program version

For Additional help run `man pint` to view the man page
"""

help_filter = """
    Filter result using result attributes and operators.

    The filter option should follow the syntax: --filter=<attr><operator><value>.

    Available Operators:
        = Equality
        > Greater than (works only for numbers)
        < Smaller than (works only for numbers)
        % Python compatible Regex
        ! Substring is absent from attribute
        ~ Substring is present in attribute

    Attributes:
        id:
            Value: string
            Operators: =

        replacementid:
            Value: string
            Operators: =

        ip:
            Value: IPv4 string with the format 0.0.0.0
            Operators: =

        name:
            Value: string
            Operators: ~ ! %

        replacementname:
            Value: string
            Operators: ~ ! %

        publishedon:
            Value: number (with date format 20240220)
            Operators: < = >

        deprecatedon:
            Value: number (with date format 20240220)
            Operators: < = >

        deletedon:
            Value: number (with date format 20240220)
            Operators: < = >

        type:
            Value: string
            Operators: ~ ! %

    Examples:
        --filter='publishedon>20240220' filters images published after 20240220
        --filter='id=1' filters images with id equals to 1
        --filter='ip=1.2.3.4' filters IP equals to 1.2.3.4
        --filter='name%^suse-sles-sap-12.*' return names that start with suse-sles-sap-12
        --filter='name~suse-sles-sap-12' return names with substring suse-sles-sap-12
        --filter='name!suse-sles-sap-12' return names without substring suse-sles-sap-12

    You can combine filters separating them by comma, the order of filter execution is
    the same as the input. Every filter will increase restriction acting as an AND.

    --filter='publishedon>20240220,name~suse-sles-sap-12' published after 20240220 with substring suse-sles-sap-12 in the name

    Be aware that not every filter is available for every kind of data requested, filters that don't match any attribute
    will result in the entire result set to be filtered.
"""

import json
import sys

from docopt import docopt

import susepubliccloudinfoclient.infoserverrequests as ifsrequest
import susepubliccloudinfoclient.version as version

def _get_providers():
    try:
        provider_data = ifsrequest.get_provider_data(
            None, None, 'json', 'all', None
        )
    except Exception:
        return ["alibaba", "amazon", "google", "microsoft", "oracle"]

    try:
        providers = json.loads(provider_data)
    except json.decoder.JSONDecodeError:
        print('Unable to load supported frameworks from server')
        print('Received: "%s"' % provider_data)

    cloud_providers = []
    for provider in providers['providers']:
        cloud_providers.append(provider['name'])

    return cloud_providers

cloud_providers = _get_providers()

command_args = docopt(
    __doc__.format(
        PROVIDERS = "|".join(cloud_providers),
        URL=ifsrequest.DEFAULT_URL,
    ),
    version=version.VERSION
)

if command_args['--help-filter']:
    print(help_filter)
    sys.exit(0)

base_url = command_args['--url']

framework = None
for csp in cloud_providers:
    if command_args[csp]:
        framework = csp
        break

image_state = None
image_states_data = ifsrequest.get_image_states_data(
    None, None, 'json', None, base_url=base_url
)
try:
    image_state_info = json.loads(image_states_data)
except json.decoder.JSONDecodeError:
    print('Unable to load image state data from server')
    print('Received: "%s"' % image_states_data)
    sys.exit(1)
image_states = []
for possible_image_state in image_state_info.get('states'):
    image_states.append(possible_image_state.get('name'))

for state in image_states:
    if command_args['--%s' % state]:
        image_state = state
        break

server_type = None
server_types = ('regionserver', 'smt')
for item in server_types:
    if command_args['--%s' % item]:
        server_type = item
        break

output_format = 'plain'
output_options = ('json', 'xml')
for out in output_options:
    if command_args['--%s' % out]:
        output_format = out
        break

region = 'all'
if command_args['--region']:
    region = command_args['--region']

try:
    if command_args['images']:
        data = ifsrequest.get_image_data(
            framework,
            image_state,
            output_format,
            region,
            command_args['--filter'],
            base_url=base_url)
        if '<images/>' in data or '"images": []' in data:
            data = 'No information available. Please check your filter'
        print(data)
    elif command_args['servers']:
        print(ifsrequest.get_server_data(
            framework,
            server_type,
            output_format,
            region,
            command_args['--filter'],
            base_url=base_url))
    elif command_args['providers']:
        print(ifsrequest.get_provider_data(
            framework,
            server_type,
            output_format,
            region,
            command_args['--filter'],
            base_url=base_url))
    elif command_args['image_states']:
        print(base_url)
        print(ifsrequest.get_image_states_data(
            framework,
            server_type,
            output_format,
            region,
            command_args['--filter'],
            base_url=base_url))
    elif command_args['server_types']:
        print(ifsrequest.get_server_types_data(
            framework,
            server_type,
            output_format,
            region,
            command_args['--filter'],
            base_url=base_url))
    else:
        regions = ifsrequest.get_regions_data(
            framework,
            server_type,
            output_format,
            region,
            command_args['--filter'],
            base_url=base_url)
        if '<regions/>' in regions or '"regions": []' in regions:
            regions = ('No region information available. Images have '
                       'the same identifier in all regions')
        print(regions)
except Exception:
    sys.exit(1)
